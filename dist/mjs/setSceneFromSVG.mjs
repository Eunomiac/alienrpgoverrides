/* ▌██░░ alienrpgoverrides v0.3 (2021) ║ MIT License ║ https://github.com/Eunomiac/alienrpgoverrides ░░██▐const LIGHTOVERRIDES={percentBright:0,percentDim:1,tintAlpha:.5,angle:360},LIGHTCORRECTIONS={tintAlpha:.6,radius:1.79},LIGHTCLASSES={dimAmber:{percentBright:0,percentDim:1,tintAlpha:.12,hidden:!0},awakeAmber:{percentBright:0,percentDim:1,tintAlpha:.4,hidden:!0},coldSmoke:{lightAnimation:{type:"SecretFireSmoke Patch",speed:10,intensity:1},tintAlpha:.6},cryoSleep:{tintColor:"#ffbb00",tintAlpha:.5,percentBright:1,percentDim:1,lightAnimation:{type:"pulse",speed:1,intensity:8}},muthurSleep:{tintColor:"#ffbb00",tintAlpha:.5,percentBright:1,percentDim:1,lightAnimation:{type:"pulse",speed:1,intensity:8}},terminalBlink:{lightAnimation:{type:"BlitzAlternate Torch",intensity:10,speed:10,alterAlpha:!0,alterTranslation:!0,blueStrength:31,ratioDamper:1,secondaryColor:"#ffff00"},hidden:!0},muthurChroma:{lightAnimation:{type:"chroma",intensity:10,speed:10},hidden:!0},legend:{bright:20,dim:0,tintAlpha:.4,t:"g",lightAnimation:{type:"BlitzElectric Fault",speed:6,intensity:3}},extArcUp:{angle:160,rotation:180,t:"g",percentBright:1,percentDim:1,lightAnimation:{type:"BlitzElectric Fault",speed:2,intensity:10}},exterior:{t:"g",percentBright:1,percentDim:1,lightAnimation:{type:"BlitzElectric Fault",speed:2,intensity:10}}};export default async(e,t=!1,i=!0)=>{const{scene:n}=canvas;if("string"!=typeof e||!/<((poly)?line|circle)/.test(e))throw new Error("[BAD SVG DATA] Requires XML contents of an SVG image, passed as a string.");{i&&await n.deleteEmbeddedDocuments("Wall",n.getEmbeddedCollection("Wall").map((e=>e.id))),t&&await n.deleteEmbeddedDocuments("AmbientLight",n.getEmbeddedCollection("AmbientLight").map((e=>e.id)));const r=e.match(/<(?:polyline|line|circle|g) [^>]+>|<\/g>/g).map((e=>e.replace(/[\r\n\t<]|\/?>/g,"").replace(/\s+/g," "))),[s,a,o]=[[],[],[]],l=[],p=(e,t,i=[])=>{if(!e)return!1;if(Array.isArray(e))return e.map((e=>p(e,t,i))).flat(3).filter((e=>Boolean(e)));if("object"==typeof e){const n={};return Object.keys(e).forEach((r=>{n[r]=p(e[r],t,i)})),n}return"string"==typeof e&&(i=i.reduceRight(((e,t)=>Object.assign(e,t)),{}),t(e,i))},c=(e,t={})=>{try{const t=[],[i,n]=[{},[]],r=Object.fromEntries(e.match(/[^ ]+="[^"]+"/g).map((e=>(([e,t])=>[e,t.replace(/"/g,"").trim()])(e.split(/=/)))));if(Object.assign(i,{"#FFFFFF":{isNotWall:!0},"#000000":{isNotWall:!0},"#FFFF00":{move:1,sense:1,sound:1,door:0},"#00FFFF":{move:1,sense:0,sound:0,door:0},"#00FF00":{move:1,sense:2,sound:1,door:0},"#FF5522":{move:0,sense:1,sound:1,door:0},"#223399":{move:1,sense:1,sound:1,door:1},"#FF00FF":{move:1,sense:1,sound:1,door:2},"#774422":{move:1,sense:0,sound:0,door:2}}[r.stroke]||{}),i.isNotWall)return!1;if(!Object.values(i).length)throw new Error(`Unrecognized stroke color: ${r.stroke}`);i.group&&(i["flags.alienrpgoverrides.group"]=i.group,delete i.group),n.push(..."points"in r?r.points.split(/ /).map((e=>e.split(/,/).map((e=>parseInt(e))))):[[r.x1,r.y1],[r.x2,r.y2]].map((e=>e.map((e=>parseInt(e))))));for(;n.length>1;)t.push({...i,c:[n.shift(),n[0]].flat()});return t}catch(e){return console.error(`[SKIPPING WALL] ${e.message}`),!1}},d=(e,t={})=>{try{t={...t};const i=[],[,n,r,s,a,o,l]=e.match(/(?:id="([^"]+)" )?(?:fill="(#.{6})" )?cx="([.\d]+)" cy="([.\d]+)" r="([.\d]+)"(?: group="([^"]+)")?/),p={x:parseInt(s),y:parseInt(a),bright:parseInt(o)/canvas.scene.data.grid*LIGHTCORRECTIONS.radius*(t.percentBright??LIGHTOVERRIDES.percentBright),dim:parseInt(o)/canvas.scene.data.grid*LIGHTCORRECTIONS.radius*(t.percentDim??LIGHTOVERRIDES.percentDim)};if(delete t.percentBright,delete t.percentDim,r&&(p.tintColor=r),Object.assign(p,t),l&&(p["flags.alienrpgoverrides.group"]=l),n){const[e,t]=n.split(/PARAMS-/);if(e&&(p["flags.alienrpgoverrides.name"]=e),t){const e=Object.fromEntries(t.split(/-/).map((e=>e.split(/:/).map((e=>/^[0-9.]+$/.test(e)?parseFloat(e):e)))));if("class"in e){const t={...LIGHTCLASSES[e.class]};delete e.class,Object.assign(e,t)}Object.assign(p,e)}}return p.angle=p.angle??360,p.tintAlpha=(p.tintAlpha??LIGHTOVERRIDES.tintAlpha)*LIGHTCORRECTIONS.tintAlpha,i.push(p),i}catch(e){return console.error(`[SKIPPING LIGHT] ${e.message}`),!1}};r.forEach((e=>{if(e=e.replace(/_[_\d]+"/g,'"'),/^g/.test(e)){const t=(e.match(/id="([^"]+)"/)||[""]).pop();l.push(LIGHTCLASSES[(t.match(/-class:([^-"]+)/)||[""]).pop()]??{}),o.push(t.replace(/-class:.*$/,""))}else/^\/g/.test(e)?(o.pop(),l.pop()):/^(poly)?line /.test(e)?s.push(...p(`${e} group="${o.filter((e=>Boolean(e))).join(".")}"`,c,l)):/^circle /.test(e)&&a.push(...p(`${e} group="${o.filter((e=>Boolean(e))).join(".")}"`,d,l))})),await n.createEmbeddedDocuments("Wall",s),await n.createEmbeddedDocuments("AmbientLight",a)}};